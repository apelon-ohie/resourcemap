# Autogenerated from a Treetop grammar. Edits may be lost.


module Command
  include Treetop::Runtime

  def root
    @root ||= :dyrm_command
  end

  module DyrmCommand0
    def dyrm
      elements[0]
    end

    def space
      elements[1]
    end

    def command
      elements[2]
    end
  end

  def _nt_dyrm_command
    start_index = index
    if node_cache[:dyrm_command].has_key?(index)
      cached = node_cache[:dyrm_command][index]
      if cached
        cached = SyntaxNode.new(input, index...(index + 1)) if cached == true
        @index = cached.interval.end
      end
      return cached
    end

    i0, s0 = index, []
    r1 = _nt_dyrm
    s0 << r1
    if r1
      r2 = _nt_space
      s0 << r2
      if r2
        r3 = _nt_command
        s0 << r3
      end
    end
    if s0.last
      r0 = instantiate_node(SyntaxNode,input, i0...index, s0)
      r0.extend(DyrmCommand0)
    else
      @index = i0
      r0 = nil
    end

    node_cache[:dyrm_command][start_index] = r0

    r0
  end

  module Dyrm0
  end

  def _nt_dyrm
    start_index = index
    if node_cache[:dyrm].has_key?(index)
      cached = node_cache[:dyrm][index]
      if cached
        cached = SyntaxNode.new(input, index...(index + 1)) if cached == true
        @index = cached.interval.end
      end
      return cached
    end

    i0, s0 = index, []
    i1 = index
    if has_terminal?('d', false, index)
      r2 = instantiate_node(SyntaxNode,input, index...(index + 1))
      @index += 1
    else
      terminal_parse_failure('d')
      r2 = nil
    end
    if r2
      r1 = r2
    else
      if has_terminal?('D', false, index)
        r3 = instantiate_node(SyntaxNode,input, index...(index + 1))
        @index += 1
      else
        terminal_parse_failure('D')
        r3 = nil
      end
      if r3
        r1 = r3
      else
        @index = i1
        r1 = nil
      end
    end
    s0 << r1
    if r1
      i4 = index
      if has_terminal?('y', false, index)
        r5 = instantiate_node(SyntaxNode,input, index...(index + 1))
        @index += 1
      else
        terminal_parse_failure('y')
        r5 = nil
      end
      if r5
        r4 = r5
      else
        if has_terminal?('Y', false, index)
          r6 = instantiate_node(SyntaxNode,input, index...(index + 1))
          @index += 1
        else
          terminal_parse_failure('Y')
          r6 = nil
        end
        if r6
          r4 = r6
        else
          @index = i4
          r4 = nil
        end
      end
      s0 << r4
      if r4
        i7 = index
        if has_terminal?('r', false, index)
          r8 = instantiate_node(SyntaxNode,input, index...(index + 1))
          @index += 1
        else
          terminal_parse_failure('r')
          r8 = nil
        end
        if r8
          r7 = r8
        else
          if has_terminal?('R', false, index)
            r9 = instantiate_node(SyntaxNode,input, index...(index + 1))
            @index += 1
          else
            terminal_parse_failure('R')
            r9 = nil
          end
          if r9
            r7 = r9
          else
            @index = i7
            r7 = nil
          end
        end
        s0 << r7
        if r7
          i10 = index
          if has_terminal?('m', false, index)
            r11 = instantiate_node(SyntaxNode,input, index...(index + 1))
            @index += 1
          else
            terminal_parse_failure('m')
            r11 = nil
          end
          if r11
            r10 = r11
          else
            if has_terminal?('M', false, index)
              r12 = instantiate_node(SyntaxNode,input, index...(index + 1))
              @index += 1
            else
              terminal_parse_failure('M')
              r12 = nil
            end
            if r12
              r10 = r12
            else
              @index = i10
              r10 = nil
            end
          end
          s0 << r10
        end
      end
    end
    if s0.last
      r0 = instantiate_node(SyntaxNode,input, i0...index, s0)
      r0.extend(Dyrm0)
    else
      @index = i0
      r0 = nil
    end

    node_cache[:dyrm][start_index] = r0

    r0
  end

  def _nt_command
    start_index = index
    if node_cache[:command].has_key?(index)
      cached = node_cache[:command][index]
      if cached
        cached = SyntaxNode.new(input, index...(index + 1)) if cached == true
        @index = cached.interval.end
      end
      return cached
    end

    i0 = index
    r1 = _nt_query_command
    if r1
      r0 = r1
    else
      r2 = _nt_update_command
      if r2
        r0 = r2
      else
        @index = i0
        r0 = nil
      end
    end

    node_cache[:command][start_index] = r0

    r0
  end

  module QueryCommand0
    def space1
      elements[1]
    end

    def collection_id
      elements[2]
    end

    def space2
      elements[3]
    end

    def conditional_expression
      elements[4]
    end

    def new_line
      elements[6]
    end
  end

  def _nt_query_command
    start_index = index
    if node_cache[:query_command].has_key?(index)
      cached = node_cache[:query_command][index]
      if cached
        cached = SyntaxNode.new(input, index...(index + 1)) if cached == true
        @index = cached.interval.end
      end
      return cached
    end

    i0, s0 = index, []
    i1 = index
    if has_terminal?('q', false, index)
      r2 = instantiate_node(SyntaxNode,input, index...(index + 1))
      @index += 1
    else
      terminal_parse_failure('q')
      r2 = nil
    end
    if r2
      r1 = r2
    else
      if has_terminal?('Q', false, index)
        r3 = instantiate_node(SyntaxNode,input, index...(index + 1))
        @index += 1
      else
        terminal_parse_failure('Q')
        r3 = nil
      end
      if r3
        r1 = r3
      else
        @index = i1
        r1 = nil
      end
    end
    s0 << r1
    if r1
      r4 = _nt_space
      s0 << r4
      if r4
        r5 = _nt_number
        s0 << r5
        if r5
          r6 = _nt_space
          s0 << r6
          if r6
            r7 = _nt_conditional_expression
            s0 << r7
            if r7
              r9 = _nt_space
              if r9
                r8 = r9
              else
                r8 = instantiate_node(SyntaxNode,input, index...index)
              end
              s0 << r8
              if r8
                r10 = _nt_new_line
                s0 << r10
              end
            end
          end
        end
      end
    end
    if s0.last
      r0 = instantiate_node(QueryCommandNode,input, i0...index, s0)
      r0.extend(QueryCommand0)
    else
      @index = i0
      r0 = nil
    end

    node_cache[:query_command][start_index] = r0

    r0
  end

  module UpdateCommand0
    def space1
      elements[1]
    end

    def resource_id
      elements[2]
    end

    def space2
      elements[3]
    end

    def property_list
      elements[4]
    end

    def new_line
      elements[7]
    end
  end

  def _nt_update_command
    start_index = index
    if node_cache[:update_command].has_key?(index)
      cached = node_cache[:update_command][index]
      if cached
        cached = SyntaxNode.new(input, index...(index + 1)) if cached == true
        @index = cached.interval.end
      end
      return cached
    end

    i0, s0 = index, []
    i1 = index
    if has_terminal?('u', false, index)
      r2 = instantiate_node(SyntaxNode,input, index...(index + 1))
      @index += 1
    else
      terminal_parse_failure('u')
      r2 = nil
    end
    if r2
      r1 = r2
    else
      if has_terminal?('U', false, index)
        r3 = instantiate_node(SyntaxNode,input, index...(index + 1))
        @index += 1
      else
        terminal_parse_failure('U')
        r3 = nil
      end
      if r3
        r1 = r3
      else
        @index = i1
        r1 = nil
      end
    end
    s0 << r1
    if r1
      r4 = _nt_space
      s0 << r4
      if r4
        r5 = _nt_resource
        s0 << r5
        if r5
          r6 = _nt_space
          s0 << r6
          if r6
            r7 = _nt_property_list
            s0 << r7
            if r7
              r9 = _nt_space
              if r9
                r8 = r9
              else
                r8 = instantiate_node(SyntaxNode,input, index...index)
              end
              s0 << r8
              if r8
                s10, i10 = [], index
                loop do
                  r11 = _nt_comma
                  if r11
                    s10 << r11
                  else
                    break
                  end
                end
                r10 = instantiate_node(SyntaxNode,input, i10...index, s10)
                s0 << r10
                if r10
                  r12 = _nt_new_line
                  s0 << r12
                end
              end
            end
          end
        end
      end
    end
    if s0.last
      r0 = instantiate_node(UpdateCommandNode,input, i0...index, s0)
      r0.extend(UpdateCommand0)
    else
      @index = i0
      r0 = nil
    end

    node_cache[:update_command][start_index] = r0

    r0
  end

  module PropertyList0
    def assignment_expression
      elements[0]
    end

    def next
      elements[4]
    end
  end

  def _nt_property_list
    start_index = index
    if node_cache[:property_list].has_key?(index)
      cached = node_cache[:property_list][index]
      if cached
        cached = SyntaxNode.new(input, index...(index + 1)) if cached == true
        @index = cached.interval.end
      end
      return cached
    end

    i0 = index
    i1, s1 = index, []
    r2 = _nt_assignment_expression
    s1 << r2
    if r2
      r4 = _nt_space
      if r4
        r3 = r4
      else
        r3 = instantiate_node(SyntaxNode,input, index...index)
      end
      s1 << r3
      if r3
        if has_terminal?(',', false, index)
          r5 = instantiate_node(SyntaxNode,input, index...(index + 1))
          @index += 1
        else
          terminal_parse_failure(',')
          r5 = nil
        end
        s1 << r5
        if r5
          r7 = _nt_space
          if r7
            r6 = r7
          else
            r6 = instantiate_node(SyntaxNode,input, index...index)
          end
          s1 << r6
          if r6
            r8 = _nt_property_list
            s1 << r8
          end
        end
      end
    end
    if s1.last
      r1 = instantiate_node(SyntaxNode,input, i1...index, s1)
      r1.extend(PropertyList0)
    else
      @index = i1
      r1 = nil
    end
    if r1
      r0 = r1
    else
      r9 = _nt_assignment_expression
      if r9
        r0 = r9
      else
        @index = i0
        r0 = nil
      end
    end

    node_cache[:property_list][start_index] = r0

    r0
  end

  module AssignmentExpression0
    def name
      elements[0]
    end

    def value
      elements[4]
    end
  end

  def _nt_assignment_expression
    start_index = index
    if node_cache[:assignment_expression].has_key?(index)
      cached = node_cache[:assignment_expression][index]
      if cached
        cached = SyntaxNode.new(input, index...(index + 1)) if cached == true
        @index = cached.interval.end
      end
      return cached
    end

    i0, s0 = index, []
    r1 = _nt_property
    s0 << r1
    if r1
      r3 = _nt_space
      if r3
        r2 = r3
      else
        r2 = instantiate_node(SyntaxNode,input, index...index)
      end
      s0 << r2
      if r2
        if has_terminal?('=', false, index)
          r4 = instantiate_node(SyntaxNode,input, index...(index + 1))
          @index += 1
        else
          terminal_parse_failure('=')
          r4 = nil
        end
        s0 << r4
        if r4
          r6 = _nt_space
          if r6
            r5 = r6
          else
            r5 = instantiate_node(SyntaxNode,input, index...index)
          end
          s0 << r5
          if r5
            r7 = _nt_value
            s0 << r7
          end
        end
      end
    end
    if s0.last
      r0 = instantiate_node(AssignmentExpressionNode,input, i0...index, s0)
      r0.extend(AssignmentExpression0)
    else
      @index = i0
      r0 = nil
    end

    node_cache[:assignment_expression][start_index] = r0

    r0
  end

  module ConditionalExpression0
    def name
      elements[0]
    end

    def operator
      elements[2]
    end

    def value
      elements[4]
    end
  end

  def _nt_conditional_expression
    start_index = index
    if node_cache[:conditional_expression].has_key?(index)
      cached = node_cache[:conditional_expression][index]
      if cached
        cached = SyntaxNode.new(input, index...(index + 1)) if cached == true
        @index = cached.interval.end
      end
      return cached
    end

    i0, s0 = index, []
    r1 = _nt_property
    s0 << r1
    if r1
      r3 = _nt_space
      if r3
        r2 = r3
      else
        r2 = instantiate_node(SyntaxNode,input, index...index)
      end
      s0 << r2
      if r2
        r4 = _nt_comparison_operator
        s0 << r4
        if r4
          r6 = _nt_space
          if r6
            r5 = r6
          else
            r5 = instantiate_node(SyntaxNode,input, index...index)
          end
          s0 << r5
          if r5
            r7 = _nt_value
            s0 << r7
          end
        end
      end
    end
    if s0.last
      r0 = instantiate_node(ConditionalExpressionNode,input, i0...index, s0)
      r0.extend(ConditionalExpression0)
    else
      @index = i0
      r0 = nil
    end

    node_cache[:conditional_expression][start_index] = r0

    r0
  end

  def _nt_resource
    start_index = index
    if node_cache[:resource].has_key?(index)
      cached = node_cache[:resource][index]
      if cached
        cached = SyntaxNode.new(input, index...(index + 1)) if cached == true
        @index = cached.interval.end
      end
      return cached
    end

    s0, i0 = [], index
    loop do
      r1 = _nt_alpha_numeric
      if r1
        s0 << r1
      else
        break
      end
    end
    if s0.empty?
      @index = i0
      r0 = nil
    else
      r0 = instantiate_node(SyntaxNode,input, i0...index, s0)
    end

    node_cache[:resource][start_index] = r0

    r0
  end

  def _nt_property
    start_index = index
    if node_cache[:property].has_key?(index)
      cached = node_cache[:property][index]
      if cached
        cached = SyntaxNode.new(input, index...(index + 1)) if cached == true
        @index = cached.interval.end
      end
      return cached
    end

    r0 = _nt_phrase

    node_cache[:property][start_index] = r0

    r0
  end

  def _nt_value
    start_index = index
    if node_cache[:value].has_key?(index)
      cached = node_cache[:value][index]
      if cached
        cached = SyntaxNode.new(input, index...(index + 1)) if cached == true
        @index = cached.interval.end
      end
      return cached
    end

    i0 = index
    r1 = _nt_number
    if r1
      r0 = r1
    else
      r2 = _nt_string
      if r2
        r0 = r2
      else
        @index = i0
        r0 = nil
      end
    end

    node_cache[:value][start_index] = r0

    r0
  end

  module String0
    def phrase
      elements[0]
    end

  end

  def _nt_string
    start_index = index
    if node_cache[:string].has_key?(index)
      cached = node_cache[:string][index]
      if cached
        cached = SyntaxNode.new(input, index...(index + 1)) if cached == true
        @index = cached.interval.end
      end
      return cached
    end

    i0, s0 = index, []
    r1 = _nt_phrase
    s0 << r1
    if r1
      r3 = _nt_space
      if r3
        r2 = r3
      else
        r2 = instantiate_node(SyntaxNode,input, index...index)
      end
      s0 << r2
    end
    if s0.last
      r0 = instantiate_node(SyntaxNode,input, i0...index, s0)
      r0.extend(String0)
    else
      @index = i0
      r0 = nil
    end

    node_cache[:string][start_index] = r0

    r0
  end

  module Phrase0
    def word
      elements[0]
    end

    def space
      elements[1]
    end

    def phrase
      elements[2]
    end
  end

  def _nt_phrase
    start_index = index
    if node_cache[:phrase].has_key?(index)
      cached = node_cache[:phrase][index]
      if cached
        cached = SyntaxNode.new(input, index...(index + 1)) if cached == true
        @index = cached.interval.end
      end
      return cached
    end

    i0 = index
    i1, s1 = index, []
    r2 = _nt_word
    s1 << r2
    if r2
      r3 = _nt_space
      s1 << r3
      if r3
        r4 = _nt_phrase
        s1 << r4
      end
    end
    if s1.last
      r1 = instantiate_node(SyntaxNode,input, i1...index, s1)
      r1.extend(Phrase0)
    else
      @index = i1
      r1 = nil
    end
    if r1
      r0 = r1
    else
      r5 = _nt_word
      if r5
        r0 = r5
      else
        @index = i0
        r0 = nil
      end
    end

    node_cache[:phrase][start_index] = r0

    r0
  end

  module Number0
  end

  def _nt_number
    start_index = index
    if node_cache[:number].has_key?(index)
      cached = node_cache[:number][index]
      if cached
        cached = SyntaxNode.new(input, index...(index + 1)) if cached == true
        @index = cached.interval.end
      end
      return cached
    end

    i0, s0 = index, []
    s1, i1 = [], index
    loop do
      r2 = _nt_digit
      if r2
        s1 << r2
      else
        break
      end
    end
    r1 = instantiate_node(SyntaxNode,input, i1...index, s1)
    s0 << r1
    if r1
      i3 = index
      r4 = _nt_word
      if r4
        r3 = nil
      else
        @index = i3
        r3 = instantiate_node(SyntaxNode,input, index...index)
      end
      s0 << r3
    end
    if s0.last
      r0 = instantiate_node(NumberNode,input, i0...index, s0)
      r0.extend(Number0)
    else
      @index = i0
      r0 = nil
    end

    node_cache[:number][start_index] = r0

    r0
  end

  module Word0
  end

  def _nt_word
    start_index = index
    if node_cache[:word].has_key?(index)
      cached = node_cache[:word][index]
      if cached
        cached = SyntaxNode.new(input, index...(index + 1)) if cached == true
        @index = cached.interval.end
      end
      return cached
    end

    i0 = index
    i1, s1 = index, []
    s2, i2 = [], index
    loop do
      r3 = _nt_character
      if r3
        s2 << r3
      else
        break
      end
    end
    if s2.empty?
      @index = i2
      r2 = nil
    else
      r2 = instantiate_node(SyntaxNode,input, i2...index, s2)
    end
    s1 << r2
    if r2
      s4, i4 = [], index
      loop do
        r5 = _nt_symbol
        if r5
          s4 << r5
        else
          break
        end
      end
      r4 = instantiate_node(SyntaxNode,input, i4...index, s4)
      s1 << r4
      if r4
        s6, i6 = [], index
        loop do
          r7 = _nt_character
          if r7
            s6 << r7
          else
            break
          end
        end
        r6 = instantiate_node(SyntaxNode,input, i6...index, s6)
        s1 << r6
      end
    end
    if s1.last
      r1 = instantiate_node(SyntaxNode,input, i1...index, s1)
      r1.extend(Word0)
    else
      @index = i1
      r1 = nil
    end
    if r1
      r0 = r1
    else
      r8 = _nt_symbol
      if r8
        r0 = r8
      else
        @index = i0
        r0 = nil
      end
    end

    node_cache[:word][start_index] = r0

    r0
  end

  module Unicode0
  end

  def _nt_unicode
    start_index = index
    if node_cache[:unicode].has_key?(index)
      cached = node_cache[:unicode][index]
      if cached
        cached = SyntaxNode.new(input, index...(index + 1)) if cached == true
        @index = cached.interval.end
      end
      return cached
    end

    i0, s0 = index, []
    if index < input_length
      r1 = instantiate_node(SyntaxNode,input, index...(index + 1))
      @index += 1
    else
      terminal_parse_failure("any character")
      r1 = nil
    end
    s0 << r1
    if r1
      i2 = index
      r3 = lambda { |s| s.first.text_value.ascii_only? }.call(s0)
      if r3
        r2 = nil
      else
        @index = i2
        r2 = instantiate_node(SyntaxNode,input, index...index)
      end
      s0 << r2
    end
    if s0.last
      r0 = instantiate_node(SyntaxNode,input, i0...index, s0)
      r0.extend(Unicode0)
    else
      @index = i0
      r0 = nil
    end

    node_cache[:unicode][start_index] = r0

    r0
  end

  def _nt_character
    start_index = index
    if node_cache[:character].has_key?(index)
      cached = node_cache[:character][index]
      if cached
        cached = SyntaxNode.new(input, index...(index + 1)) if cached == true
        @index = cached.interval.end
      end
      return cached
    end

    i0 = index
    r1 = _nt_unicode
    if r1
      r0 = r1
    else
      r2 = _nt_alpha_numeric
      if r2
        r0 = r2
      else
        @index = i0
        r0 = nil
      end
    end

    node_cache[:character][start_index] = r0

    r0
  end

  def _nt_digit
    start_index = index
    if node_cache[:digit].has_key?(index)
      cached = node_cache[:digit][index]
      if cached
        cached = SyntaxNode.new(input, index...(index + 1)) if cached == true
        @index = cached.interval.end
      end
      return cached
    end

    if has_terminal?('\G[\\d]', true, index)
      r0 = instantiate_node(SyntaxNode,input, index...(index + 1))
      @index += 1
    else
      r0 = nil
    end

    node_cache[:digit][start_index] = r0

    r0
  end

  def _nt_alpha_numeric
    start_index = index
    if node_cache[:alpha_numeric].has_key?(index)
      cached = node_cache[:alpha_numeric][index]
      if cached
        cached = SyntaxNode.new(input, index...(index + 1)) if cached == true
        @index = cached.interval.end
      end
      return cached
    end

    if has_terminal?('\G[\\w]', true, index)
      r0 = instantiate_node(SyntaxNode,input, index...(index + 1))
      @index += 1
    else
      r0 = nil
    end

    node_cache[:alpha_numeric][start_index] = r0

    r0
  end

  def _nt_symbol
    start_index = index
    if node_cache[:symbol].has_key?(index)
      cached = node_cache[:symbol][index]
      if cached
        cached = SyntaxNode.new(input, index...(index + 1)) if cached == true
        @index = cached.interval.end
      end
      return cached
    end

    if has_terminal?('\G[\\.\\?:;\\-_+\\!@\\$%&*|\\\\/(){}\\[\\]"\']', true, index)
      r0 = instantiate_node(SyntaxNode,input, index...(index + 1))
      @index += 1
    else
      r0 = nil
    end

    node_cache[:symbol][start_index] = r0

    r0
  end

  module ComparisonOperator0
  end

  def _nt_comparison_operator
    start_index = index
    if node_cache[:comparison_operator].has_key?(index)
      cached = node_cache[:comparison_operator][index]
      if cached
        cached = SyntaxNode.new(input, index...(index + 1)) if cached == true
        @index = cached.interval.end
      end
      return cached
    end

    i0, s0 = index, []
    if has_terminal?('\G[\\<\\>]', true, index)
      r2 = true
      @index += 1
    else
      r2 = nil
    end
    if r2
      r1 = r2
    else
      r1 = instantiate_node(SyntaxNode,input, index...index)
    end
    s0 << r1
    if r1
      s3, i3 = [], index
      loop do
        if has_terminal?('=', false, index)
          r4 = instantiate_node(SyntaxNode,input, index...(index + 1))
          @index += 1
        else
          terminal_parse_failure('=')
          r4 = nil
        end
        if r4
          s3 << r4
        else
          break
        end
        if s3.size == 2
          break
        end
      end
      r3 = instantiate_node(SyntaxNode,input, i3...index, s3)
      s0 << r3
    end
    if s0.last
      r0 = instantiate_node(SyntaxNode,input, i0...index, s0)
      r0.extend(ComparisonOperator0)
    else
      @index = i0
      r0 = nil
    end

    node_cache[:comparison_operator][start_index] = r0

    r0
  end

  def _nt_space
    start_index = index
    if node_cache[:space].has_key?(index)
      cached = node_cache[:space][index]
      if cached
        cached = SyntaxNode.new(input, index...(index + 1)) if cached == true
        @index = cached.interval.end
      end
      return cached
    end

    s0, i0 = [], index
    loop do
      if has_terminal?('\G[\\s]', true, index)
        r1 = true
        @index += 1
      else
        r1 = nil
      end
      if r1
        s0 << r1
      else
        break
      end
    end
    if s0.empty?
      @index = i0
      r0 = nil
    else
      r0 = instantiate_node(SyntaxNode,input, i0...index, s0)
    end

    node_cache[:space][start_index] = r0

    r0
  end

  def _nt_comma
    start_index = index
    if node_cache[:comma].has_key?(index)
      cached = node_cache[:comma][index]
      if cached
        cached = SyntaxNode.new(input, index...(index + 1)) if cached == true
        @index = cached.interval.end
      end
      return cached
    end

    if has_terminal?(',', false, index)
      r0 = instantiate_node(SyntaxNode,input, index...(index + 1))
      @index += 1
    else
      terminal_parse_failure(',')
      r0 = nil
    end

    node_cache[:comma][start_index] = r0

    r0
  end

  def _nt_new_line
    start_index = index
    if node_cache[:new_line].has_key?(index)
      cached = node_cache[:new_line][index]
      if cached
        cached = SyntaxNode.new(input, index...(index + 1)) if cached == true
        @index = cached.interval.end
      end
      return cached
    end

    s0, i0 = [], index
    loop do
      if has_terminal?('\G[\\n\\r]', true, index)
        r1 = true
        @index += 1
      else
        r1 = nil
      end
      if r1
        s0 << r1
      else
        break
      end
    end
    r0 = instantiate_node(SyntaxNode,input, i0...index, s0)

    node_cache[:new_line][start_index] = r0

    r0
  end

end

class CommandParser < Treetop::Runtime::CompiledParser
  include Command
end

