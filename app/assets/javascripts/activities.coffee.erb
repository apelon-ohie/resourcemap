@initActivities = ->
  DESCRIPTION_LENGTH = 100

  class Activity
    constructor: (data) ->
      @id = ko.observable data?.id
      @collection = ko.observable data?.collection
      @user = ko.observable data?.user
      @description = ko.observable data?.description
      @createdAt = ko.observable data?.created_at
      @expanded = ko.observable false
      @canBeExpanded = ko.computed => @description().length > DESCRIPTION_LENGTH

      @displayedDescription = ko.computed =>
        if !@canBeExpanded() || @expanded()
          @description()
        else
          "#{@description().substring(0, DESCRIPTION_LENGTH)}..."

    expand: => @expanded(true)

  class ActivityGroup
    constructor: (kinds, description) ->
      @kinds = kinds
      @description = description
      @selected = ko.observable true

    @member_permissions_kinds = ['name_permission,changed','location_permission,changed','layer_membership,created','layer_membership,deleted','layer_membership,changed']

    @anonymous_permissions_kinds = ['anonymous_name_location_permission,changed','anonymous_layer_permission,changed']

    @all_activity_groups =
      [
        new ActivityGroup(['collection,created'], __("Collection created")),
        new ActivityGroup(['site,created'], __("Site created")),
        new ActivityGroup(['layer,created'], __("Layer created")),
        new ActivityGroup(['collection,imported'], __("Collection imported")),
        new ActivityGroup(['site,changed'], __("Site changed")),
        new ActivityGroup(['layer,changed'], __("Layer changed")),
        new ActivityGroup(['collection,csv_imported'], __("Collection CSV imported")),
        new ActivityGroup(['site,deleted'], __("Site deleted")),
        new ActivityGroup(['layer,deleted'], __("Layer deleted")),
        new ActivityGroup(['admin_permission,changed'], __("Admin permissions changed")),
        new ActivityGroup(['membership,deleted'], __("Member removed")),
        new ActivityGroup(['site,deleted'], __("Site deleted")),
        new ActivityGroup(@member_permissions_kinds, __("Member permissions changed")),
        new ActivityGroup(['membership,created'], __("Member added")),
        new ActivityGroup(@anonymous_permissions_kinds, __("Anonymous permissions changed"))
      ]

  class ActivitiesViewModel
    constructor: (activities) ->
      @activities = ko.observableArray []
      @hasMore = ko.observable true
      @loading = ko.observable false
      @pushActivities activities
      @selectedCollectionIds = ko.observableArray $.map($('.collection_id'), (x) -> x.value)

      @kinds = <%= Activity::Kinds.to_json %>

      @activityGroups = ActivityGroup.all_activity_groups

      @row1 = @activityGroups[0..2]
      @row2 = @activityGroups[3..5]
      @row3 = @activityGroups[6..8]
      @row4 = @activityGroups[9..11]
      @row5 = @activityGroups[12..14]

      @rows = [@row1, @row2, @row3, @row4, @row5]

      @selectedActivityGroups = ko.computed () => _.filter(@activityGroups, (g) -> g.selected())


      @collectionsCount = $('.collection_id').length

      @selectedCollectionIds.subscribe => @refreshActivities()

      @selectionObserver = @selectedActivityGroups.subscribe(=> @refreshActivities())

    pushActivities: (activities) =>
      if activities.length == 25
        activities = activities.slice(0, activities.length - 1)
      else
        @hasMore false

      @activities.push new Activity(activity) for activity in activities

    loadMore: =>
      @loading(true)
      @hasMore(true)

      q = @setQueryParams({})
      q.before_id = @activities()[@activities().length - 1].id() if @activities().length > 0

      $.get "/activity.json", q, (activities) =>
        @pushActivities(activities)
        @loading(false)

    setQueryParams: (q) =>
      if @selectedCollectionIds().length == 0
        q.collection_ids = [0]
      else if @selectedCollectionIds().length < @collectionsCount
        q.collection_ids = @selectedCollectionIds()

      if @selectedActivityGroups().length == 0
        q.kinds = [0]
      else if @selectedActivityGroups().length < @kinds.length
        q.kinds = _.flatten(@selectedActivityGroups().map((g) => g.kinds))

      q

    refreshActivities: =>
      @activities([])
      @loadMore()

    checkAllCollectionIds: =>
      ids = $.map($('.collection_id'), (x) -> x.value)
      @selectedCollectionIds(ids) if @selectedCollectionIds().length != @collectionsCount

    uncheckAllCollectionIds: =>
      @selectedCollectionIds([]) if @selectedCollectionIds().length != 0

    allActivityGroupsSelected: =>  @selectedActivityGroups().length == @activityGroups.length

    noActivityGroupSelected: => @selectedActivityGroups().length == 0

    setAllKinds: (checked, condition) =>
      @selectionObserver.dispose()
      (g.selected(checked) for g in @activityGroups) unless condition
      @refreshActivities()
      @selectionObserver = @selectedActivityGroups.subscribe(=> @refreshActivities())

    checkAllKinds: => @setAllKinds true, @allActivityGroupsSelected()

    uncheckAllKinds: => @setAllKinds false, @noActivityGroupSelected()

    viewAsRSS: =>
      q = @setQueryParams({})
      params = $.param q

      url = "/api/activity.rss"
      url += "?#{params}" if params.length > 0
      window.open url

    refreshTimeago: => $('.timeago').timeago()

  $.get "/activity.json", {}, (activities) =>
    window.model = new ActivitiesViewModel(activities)
    ko.applyBindings window.model
    window.model.checkAllKinds()

    $('.hidden-until-loaded').show()
    window.model.refreshTimeago()
