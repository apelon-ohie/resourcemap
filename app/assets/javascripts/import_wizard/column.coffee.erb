onImportWizard ->
  class @Column
    constructor: (data) ->
      @name = ko.observable data.name

      # How to use this column (new field? existing field? id? name? lat? lng? ignore?)
      @usage = ko.observable data.usage

      # For existing fields
      @layer = ko.observable(if data.layer_id then window.model.findLayer(data.layer_id) else null)
      @field = ko.observable(if @layer() then @layer().findField(data.field_id) else null)

      # For new fields
      @kind = ko.observable data.kind
      @code = ko.observable data.code
      @label = ko.observable data.label

      # For new select_one or select_many fields
      @selectKind = ko.observable 'code'

      @iconClass = ko.computed => @computeIconClass()

      @kind.subscribe =>
        window.model.validateSites(this)

      @field.subscribe =>
        window.model.validateSites(this)

      @error = ko.observableArray([])

      @error.subscribe =>
        # HTML is rendered after executing applyColumnBubble, so the popups don't get removed
        setTimeout(@applyColumnBubble, 50)

    toJSON: =>
      json =
        usage: @usage()
        name: @name()
      if @usage() == 'existing_field'
        json.field_id = @field().id
      if @usage() == 'new_field'
        json.kind = @kind()
        json.code = @code()
        json.label = @label()
        json.selectKind = @selectKind() if @kind() == 'select_one' || @kind() == 'select_many'
      json

    applyColumnBubble: =>
      $('.column_header').not(".error_column").RemoveBubblePopup()
      $('.error_column').each (index) ->
        $(this).CreateBubblePopup({
        selectable: true,
        position : 'top',
        innerHtml: $(this).attr('error'),
        innerHtmlStyle: {
            color:'#000000',
            'background-color' :'white'
            },
        themeName:  'bubble',
        themePath:  '<%= InsteddRails.url %>/theme/images/'
        });


    # validateColumn: () =>
    #
    #     # Should not be repeated values in columns
    #     if (@kind() == 'select_one' || @kind() == 'select_many') && !(@selectKind() == 'both')
    #       columns = columns.filter((c) => c.label() == @label() && c.code() == @code() && c.kind() == @kind())
    #       if !(columns.length == 2 && ((columns[0].selectKind() == 'code' && columns[1].selectKind() == 'label') || (columns[0].selectKind() == 'label' && columns[1].selectKind() == 'code') ))
    #         return "You must choose a single column to be the Label and a single colunm to be the Code of property #{@name()}"
    #     else



    computeIconClass: =>
      if @usage() == 'existing_field' && @field()
        kind = @field().kind
      else
        kind = @kind()

      field_class = FIELD_TYPES[kind]

      if field_class
        field_class.small_css_class
      else
        'faccept'



