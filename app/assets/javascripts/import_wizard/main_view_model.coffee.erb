onImportWizard ->
  class @Usage
    constructor: (@name, @code) ->

  class @MainViewModel
    initialize: (collectionId, layers, columns) ->
      @collectionId = collectionId
      @layers = $.map(layers, (x) -> new Layer(x))
      @columns = ko.observableArray $.map(columns, (x) -> new Column(x))
      @selectedColumn = ko.observable()
      @loadUsages()

      @sites = ko.observableArray()

      @hasId = ko.observable false

      @site = ko.computed => @computeSite()

      @error = ko.computed =>
        window.arrayAny(@sites(), (s) => window.arrayAny(s, (f) => f.error)) || window.arrayAny(@columns(), (c) => c.error().length > 0)

      @validationErrors = ko.observable()

      @valid = ko.computed => !@error()
      @importing = ko.observable false
      @importError = ko.observable false

    loadSites: (preview)=>
      sites = $.map(preview.sites, (x) -> new Site(x))
      @sites(sites)
      @validationErrors(new ValidationErrors(preview.errors))

    loadUsages: =>
      @usages = [new Usage('New field', 'new_field')]
      if @layers.length > 0
        @usages.push(new Usage('Existing field', 'existing_field'))
      @usages.push(new Usage('Name', 'name'))
      @usages.push(new Usage('Latitude', 'lat'))
      @usages.push(new Usage('Longitude', 'lng'))
      @usages.push(new Usage('Ignore', 'ignore'))

      @selectableUsagesForAdmins = @usages.slice(0)
      # Non admins can't create new fields
      @selectableUsagesForNonAdmins = @usages.slice(1)
      # The usage ID is not selectable by the user
      @usages.push(new Usage('resmap-id', 'id'))

    findLayer: (id) =>
      (layer for layer in @layers when layer.id == id)[0]

    findField: (id) =>
      for layer in @layers
        field = layer.findField(id) unless field
      field

    refreshColumnsPopups: ->
       $('.column_header').not(".error_column").RemoveBubblePopup()
       $('.error_column').each (index) ->
         $(this).CreateBubblePopup({
         selectable: true,
         position : 'top',
         innerHtml: $(this).attr('error'),
         innerHtmlStyle: {
             color:'#000000',
             'background-color' :'white'
             },
         themeName:  'bubble',
         themePath:  '<%= InsteddRails.url %>/theme/images/'
         });

    refreshSitesPopups: ->
      $('.error').each (index) ->
        $(this).CreateBubblePopup({
        selectable: true,
        position : 'top',
        innerHtml: $(this).attr('error'),
        innerHtmlStyle: {
            color:'#000000',
            'background-color' :'white'
            },
        themeName:  'bubble',
        themePath:  '<%= InsteddRails.url %>/theme/images/'
        });


    refreshBubblePopups: =>
      # HTML is rendered after executing refreshColumnsPopups, so the popups don't get removed
      setTimeout(@refreshColumnsPopups, 50)
      @refreshSitesPopups()

    selectColumn: (column) =>
      @selectedColumn(column)
      true

    validateSites:(modified_column) =>
      column = modified_column.toJSON()
      #$.post "/collections/#{@collectionId}/import_wizard/validate_sites_with_column.json", {column: JSON.stringify(column)}, (preview) =>
        # for column_index, validated_value of preview_column
        #           for site in @sites()
        #             site_index = @sites().indexOf(site)
        #             site.splice(column_index, 1, validated_value[site_index])
        #@refreshSitesPopups()

      $.post "/collections/#{@collectionId}/import_wizard/validate_sites_with_columns.json", {columns: JSON.stringify(@columns())}, (preview) =>
        window.model.loadSites(preview)

    startImport: =>
      @importing(true)
      columns = $.map(@columns(), (x) -> x.toJSON())
      $.ajax "/collections/#{@collectionId}/import_wizard/execute.json",
        type: 'POST'
        data: {columns: columns},
        success: =>
          window.location = "/collections?collection=#{@collectionId}"
        error: =>
          @importing(false)
          @importError(true)

    computeSite: =>
      data = {name: null, properties: []}
      propertiesByCode = {}
      propertiesByField = {}
      propertiesByLabel = {}
      optionColumnByCodeAndLabel = {}

      for column in @columns()

        # Delete previous errors
        column.error([])

        if column.usage() == 'new_field'
          column.error.push('Label cannot be blank') unless !!column.label()
          column.error.push('Code cannot be blank') unless !!column.code()

        if column.usage() == 'ignore'
          continue

        if column.usage() == 'id'
          if data.id_column
            column.error.push('You chose more than one column to be the ID of the site')
          data.id_column = column
          @hasId(true)
          continue

        if column.usage() == 'name'
          if data.name_column
            column.error.push('You chose more than one column to be the Name of the site')
            data.name_column.error(['You chose more than one column to be the Name of the site'])
          data.name_column = column
          continue

        if column.usage() == 'lat'
          if data.lat_column
            column.error.push('You chose more than one column to be the Lat of the site')
            data.lat_column.error(['You chose more than one column to be the Lat of the site'])
          data.lat_column = column
          continue

        if column.usage() == 'lng'
           if data.lng_column
             column.error.push('You chose more than one column to be the Longitude of the site')
             data.lng_column.error(['You chose more than one column to be the Longitude of the site'])
           data.lng_column = column
           continue

        do_not_add = false
        propertyData =
          column: column
          kind: column.kind()

        if column.usage() == 'new_field'
          # Code and Label should not exist in collection's existing fields
          fields = $.map(@layers, (l) -> l.fields)
          if window.arrayAny(fields, (f) => f.name == column.label())
            column.error.push("A field with label #{column.label()} already exists in collection's fields")
          if window.arrayAny(fields, (f) => f.code == column.code())
            column.error.push("A field with code #{column.code()} already exists in collection's fields")

          if column.kind() == 'select_one' || column.kind() == 'select_many'
            existing = propertiesByCode[column.code()]
            if existing && existing.column.label() == column.label()
              do_not_add = true
              switch column.selectKind()
                when 'code'
                  existing.valueCode = true
                when 'label'
                  existing.valueLabel = true
                when 'both'
                  existing.valueCode = true
                  existing.valueLabel = true
            else
              switch column.selectKind()
                when 'code'
                  propertyData.valueCode = true
                when 'label'
                  propertyData.valueLabel = true
                when 'both'
                  propertyData.valueCode = true
                  propertyData.valueLabel = true
        else
          if propertiesByField[column.field()?.id]
            propertiesByField[column.field()?.id].error(["You chose more than one column to be the existing '#{column.layer().name} - #{column.field().name}' field"])
            column.error.push("You chose more than one column to be the existing '#{column.layer().name} - #{column.field().name}' field")
          propertiesByField[column.field().id] = column if column.field()?.id

        unless do_not_add
          property = new Property(propertyData)
          data.properties.push property

        unless ((column.kind() == 'select_one' || column.kind() == 'select_many') && !(column.selectKind() == 'both'))
          if propertiesByLabel[column.label()]
            column.error.push("You chose more than one column with label #{column.label()}")
          if propertiesByCode[column.code()]
            column.error.push("You chose more than one column with code #{column.code()}")

        propertiesByCode[column.code()] = property
        propertiesByLabel[column.label()] = property

      for property in data.properties
        if column.usage() == 'new_field' && (property.kind == 'select_one' || property.kind == 'select_many')
          property.column.error.push("You must choose a column to be the Code of property #{property.column.name()}") unless property.valueCode
          property.column.error.push("You must choose a column to be the Label of property #{property.column.name()}") unless property.valueLabel

      @refreshBubblePopups()