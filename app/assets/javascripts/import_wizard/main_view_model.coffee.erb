onImportWizard ->
  class @Usage
    constructor: (@name, @code) ->

  class @MainViewModel
    initialize: (collectionId, layers, columns) ->
      @collectionId = collectionId
      @layers = $.map(layers, (x) -> new Layer(x))

      @columns = ko.observableArray $.map(columns,  (x, index) -> new Column(x, index))
      @visibleColumns = ko.observableArray @columns()
      @sites = ko.observableArray()
      @visibleSites = ko.observableArray()
      @showingColumns = ko.observable('all')

      @selectedColumn = ko.observable()
      @loadUsages()

      @hasId = ko.computed =>
        window.arrayAny(@columns(), (c) => c.usage() == 'id')

      @error = ko.computed =>
        window.arrayAny(@sites(), (s) => window.arrayAny(s, (f) => f.error)) || window.arrayAny(@columns(), (c) => c.errors().length > 0)

      @validationErrors = ko.observable()

      @validationErrors.subscribe  =>
        @recalculateErrorsForColumns()

      @valid = ko.computed => !@error()
      @importing = ko.observable false
      @importError = ko.observable false

    recalculateErrorsForColumns: =>
      for column in @columns()
        new_errors = @validationErrors().errorsForColumn(column.index)
        column.errors(new_errors)

    loadVisibleSites: =>
      visible_columns_indexes = $.map(@visibleColumns(), (c) -> c.index)
      @visibleSites([])
      for site in @sites()
          new_site_columns = $.grep site.siteColumns, (s, i) ->
            i in visible_columns_indexes
          @visibleSites.push(new Site(new_site_columns))

    loadSites: (preview) =>
      sites = $.map(preview.sites, (x) -> new Site(x))
      @sites(sites)
      @loadVisibleSites()
      @validationErrors(new ValidationErrors(preview.errors))

    loadUsages: =>
      @usages = [new Usage('New field', 'new_field')]
      if @layers.length > 0
        @usages.push(new Usage('Existing field', 'existing_field'))
      @usages.push(new Usage('Name', 'name'))
      @usages.push(new Usage('Latitude', 'lat'))
      @usages.push(new Usage('Longitude', 'lng'))
      @usages.push(new Usage('Ignore', 'ignore'))

      @selectableUsagesForAdmins = @usages.slice(0)
      # Non admins can't create new fields
      @selectableUsagesForNonAdmins = @usages.slice(1)
      # The usage ID is not selectable by the user
      @usages.push(new Usage('resmap-id', 'id'))

    findLayer: (id) =>
      (layer for layer in @layers when layer.id == id)[0]

    findField: (id) =>
      for layer in @layers
        field = layer.findField(id) unless field
      field

    selectColumn: (column) =>
      @selectedColumn(column)
      true

    validateSites:(modified_column) =>
      column = modified_column.toJSON()
      # Single column valiation is already implemented server side.
      $.post "/collections/#{@collectionId}/import_wizard/validate_sites_with_columns.json", {columns: JSON.stringify(@columns())}, (preview) =>
        window.model.loadSites(preview)

    showAllColumns: =>
      @visibleColumns(@columns())
      @visibleSites(@sites())
      @showingColumns('all')

    showColumnsWithErrors: =>
      with_errors = $.grep @columns(), (c, i) ->
        c.errors().length > 0
      @visibleColumns(with_errors)
      @loadVisibleSites()
      @showingColumns('with_errors')

    startImport: =>
      @importing(true)
      columns = $.map(@columns(), (x) -> x.toJSON())
      $.ajax "/collections/#{@collectionId}/import_wizard/execute.json",
        type: 'POST'
        data: {columns: columns},
        success: =>
          window.location = "/collections?collection=#{@collectionId}"
        error: =>
          @importing(false)
          @importError(true)
