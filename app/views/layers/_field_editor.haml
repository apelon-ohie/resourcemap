.box.right.w30.feditor-sidebar{ko(with: '$root.currentField', visible: '$root.currentField', style: {marginTop: '$root.currentFieldMarginTop'}), style: 'position:relative'}
  %p.title Type
  %p.smalltext The data type to fill in this field.
  /ko if: isNew()
  = select_tag :kind, options_for_select(Field::Kinds.map { |kind_name| [kind_name.titleize, kind_name] }), 'data-bind' => kov(value: :kind)
  //ko
  /ko if: !isNew()
  %div{"data-bind" => "text: kind_titleize"}
  //ko
  %hr/
  %label{ko(css: {error: :nameError})} Name
  %p.smalltext The name of this field as it is presented.
  = ko_text_field_tag :name, hasfocus: :hasFocus, css: {error: :nameError}
  %hr/
  %label{ko(css: {error: :codeError})} Code
  %p.smalltext The abbreviation used to report via SMS.
  = ko_text_field_tag :code, css: {error: :codeError}

  /ko if: isOptionsKind
  %hr/
  %label{ko(css: {error: :optionsError})} Options
  %p.smalltext Possible values for this field.
  %ul.mclist.w40{style: 'width: 282px !important'}
    /ko foreach: options
    %li
      %input.arrowinput{ko(visible: :editing, hasfocus: true, value: :code, valueUpdate: :afterkeydown, event: {keypress: :keyPress, blur: '$root.optionBlur'}), type: :text, style: 'position:relative;top:1px'}
      %span.arrowgrey{ko(visible: '!editing()', click: :edit, text: :code), style: 'cursor:pointer;position:relative;top:-1px'}
      %input.ux-clist{ko(value: :label, valueUpdate: :afterkeydown, event: {blur: '$root.optionBlur'}), type: :text, style: 'width: 150px !important'}
      %button.clist-remove{ko(click: '$root.removeOption'), title: 'Remove option'}
    //ko
    %li{ko(with: '$root.newOption()')}
      %input.arrowinput{ko(value: :code, hasfocus: :hasFocus, valueUpdate: :afterkeydown, event: {keypress: '$root.newOptionKeyPress', blur: '$root.addOption'}), placeholder: "Code", style: 'position:relative;top:2px'}
      %input.ux-text{ko(value: :label, valueUpdate: :afterkeydown, event: {keypress: '$root.newOptionKeyPress', blur: '$root.addOption'}), placeholder: "Label", style: 'width: 150px !important'}
      %button.clist-add{ko(click: '$root.addOption', enable: '$root.optionValid'), title: 'Add option'}
  //ko

  /ko if: kindIsText
  = render 'layers/advanced_field_editor'
  //ko


  /ko if: kind() == 'hierarchy'
  %hr/
  %label{ko(css: {error: :hierarchyError})} Hierarchy
  %p.smalltext Upload a CSV: ID, ParentID, ItemName
  %form.hierarchy_form{action: collection_decode_hierarchy_csv_path(collection), method: :post, enctype: 'multipart/form-data', target: 'hierarchy_iframe', style: 'margin-top:6px;margin-bottom:10px'}
    %input{type: :hidden, name: 'authenticity_token', value: form_authenticity_token}
    %input.hierarchy_upload{type: :file, name: :file}
  %iframe#hierarchy_iframe{name: 'hierarchy_iframe', style: 'display:none'}
  /ko if: errorUploadingHierarchy()
  %p
    There was
    = link_to "an error", "#", :class => 'error_description_bubble'
    processing the hierarchy file
  //ko
  /ko if: uploadingHierarchy()
  Uploading, please wait...
  //ko
  /ko if: !uploadingHierarchy() && hierarchy()
  .hierarchy-container
    /ko template: {name: 'hierarchy-items-template', with: hierarchyItems}
    //ko
  //ko
  //ko
  - Field::PluginKinds.each do |name, kind|
    - if kind[:property_editor]
      /ko if: kind() == '#{name}'
      = render kind[:property_editor]
      //ko
  %br/
  %br/

.clear
