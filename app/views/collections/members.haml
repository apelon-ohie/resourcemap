= render '/tabs'

- content_for :head do
  :javascript
    $(function() { initMemberships(#{current_user.id}, #{collection.id}, #{collection_admin?}, #{collection.layers.map{|x| {id: x.id, name: x.name}}.to_json}); });
  :css
    table.GralTable td.center { text-align: center; }


.tabsline
  #memberships-main.hidden-until-loaded
    %h2 Members
    %p Manage who can see this collection and who can read/write its layers
    %br/

    Show memberships grouped by:
    %select{ko(options: :groupByOptions, value: :groupBy)}
    %br/
    %br/

    <!-- ko if: groupBy() == 'Users' -->
    .tablewrapp
      %table.GralTable
        %tr
          - if collection_admin?
            %th{:style => 'min-width:120px'}
          %th.members-tree{style: '-webkit-border-radius:8px 0 0 0;-moz-border-radius:8px 0 0 0;'} Member &rarr; Site &rarr; Layer
          %th Admin?
          %th Can Read?
          %th Can Update?
          %th{style: 'min-width:165px'}
        <!-- ko foreach: memberships -->
        /      ko if: advancedMode()
        %tr
          %td
          %td{colspan: 5, style: 'padding:6px'}
            .box.w80
              %table
                %tr
                  %td{style: 'min-width:365px'}
                    .header_text{ko(text: :userDisplayName)}
                  %td.center{style: 'min-width:50px'}
                    %input{ko(checked: :admin), type: :checkbox}
                  %td{style: 'min-width:75px'}
                  %td{style: 'min-width:80px'}
                -# FIXME: hack an empty tr to remove table header background
                %tr
                / ko foreach: membershipLayerLinks
                %tr{style: 'height: 32px'}
                  %td
                    %span{ko(text: 'layer.name()'), style: 'margin-left:20px'}
                  %td
                  %td.center
                    %input{ko(checked: :canRead, enable: '!$parent.admin()'), type: :checkbox}
                  %td.center
                    %input{ko(checked: :canWrite, enable: '!$parent.admin()'), type: :checkbox}
                / /ko
              %br/
              %h1.header_text Sites Permission
              %div{style: 'padding-left:28px; padding-right:210px'}
                .permission-edtior
                  %span Can read
                  = ko_radio_button_tag 'sitesRead.access', 'all_sites'
                  = label_tag 'sitesRead.access_all_sites', 'All sites'
                  = ko_radio_button_tag 'sitesRead.access', 'some_sites'
                  = label_tag 'sitesRead.access_some_sites', 'Some sites'
                / ko if: !sitesRead.allSites()
                %input{ko(autocompleteTagField: 'sitesRead.someSites', objectType: "Site"), proxy: collection_sites_path(collection), valueField: :id, displayField: :name, type: :text}
                / /ko

                / ko if: sitesRead.allSites()
                %hr/
                / /ko

                .permission-edtior
                  %span Can update
                  = ko_radio_button_tag 'sitesUpdate.access', 'all_sites'
                  = label_tag 'sitesUpdate.access_all_sites', 'All sites'
                  = ko_radio_button_tag 'sitesUpdate.access', 'some_sites'
                  = label_tag 'sitesUpdate.access_some_sites', 'Some sites'
                / ko if: !sitesUpdate.allSites()
                %input{ko(autocompleteTagField: 'sitesUpdate.someSites', objectType: "Site"), proxy: collection_sites_path(collection), valueField: :id, displayField: :name, type: :text}
                / /ko
              %br/
              %hr/

              .bottom-actions
                %button.white{ ko(click: 'saveSitesPermission', enable: :validAdvancedMembership) } Save
                %a.tgrey{ ko(click: 'cancelAdvancedMembership'), href: 'javascript:void(0)' } Cancel
                / ko if: !validAdvancedMembership()
                %span{ko(text: "'Can\\'t save: ' + error()"), style: 'color:red;margin-left:20px'}
                / /ko
        /      /ko

        /      ko if: !advancedMode()
        %tr{:style => 'height:32px'}
          - if collection_admin?
            %td
          %td{ko(click: :toggleExpanded), style: 'cursor:pointer'}
            %img{ko(attr: {src: "'#{InsteddRails.url}/theme/images/icons/misc/black/arrow' + (expanded() ? 'Down' : 'Right') + '.png'"}), style: "position:relative;top:1px", width: 11, height: 11}
            %span{ko(text: :userDisplayName)}
          - if collection_admin?
            <!-- ko if: isCurrentUser() -->
            %td.center{ko(html: :adminUI)}
            <!-- /ko -->
            <!-- ko if: !isCurrentUser() -->
            %td.center
              %input{ko(checked: :admin), type: :checkbox}
            <!-- /ko -->
          - else
            %td.center{ko(html: :adminUI)}

          <!-- ko if: !$root.admin() || isCurrentUser() -->
          %td.center{ko(text: :allReadUI)}
          %td.center{ko(text: :allWriteUI)}
          <!-- /ko -->
          <!-- ko if: $root.admin() && !isCurrentUser() -->
          %td.center
            %span{ko(attr: {:class => :allRead}, click: :toggleAllRead)}
          %td.center
            %span{ko(attr: {:class => :allWrite}, click: :toggleAllWrite)}
          <!-- /ko -->
          %td
            - if collection_admin?
              <!-- ko if: !isCurrentUser() -->
              = ko_link_to 'advanced', 'advancedModeOn', class: 'icon fedit black'
              = ko_link_to 'delete', '$root.destroyMembership', class: 'icon fdelete black'
              <!-- /ko -->
        <!-- ko if: expanded -->
        <!-- ko foreach: membershipLayerLinks -->
        %tr{:style => 'height:32px'}
          - if collection_admin?
            %td
          %td
            %span{ko(text: 'layer.name()'), style: 'margin-left:20px'}
          %td
          <!-- ko if: !$root.admin() || membership.isCurrentUser() -->
          %td.center{ko(text: :canReadUI)}
          %td.center{ko(text: :canWriteUI)}
          <!-- /ko -->
          <!-- ko if: $root.admin() && !membership.isCurrentUser() -->
          %td.center
            %input{ko(checked: :canRead, enable: '!$parent.admin()'), type: :checkbox}
          %td.center
            %input{ko(checked: :canWrite, enable: '!$parent.admin()'), type: :checkbox}
          <!-- /ko -->
          %td
        <!-- /ko -->
        <!-- /ko -->
        /      /ko
        <!-- /ko -->
        - if collection_admin?
          %tr{:style => 'height:32px'}
            %td
              %button.cadd#add_member Add member
            %td#autocomplete_container{style: 'width: 380px;'}
              = text_field_tag :member_email, '', :placeholder => 'Search by email...'
            %td
            %td
    <!-- /ko -->

    <!-- ko if: groupBy() == 'Layers' -->
    .tablewrapp
      %table.GralTable
        %tr
          %th.members-tree{style: '-webkit-border-radius:8px 0 0 0;-moz-border-radius:8px 0 0 0;'} Layer &rarr; Member
          %th Can Read?
          %th Can Update?
        <!-- ko foreach: layers -->
        %tr{:style => 'height:32px'}
          %td{ko(click: :toggleExpanded), style: 'cursor:pointer'}
            %img{ko(attr: {src: "'#{InsteddRails.url}/theme/images/icons/misc/black/arrow' + (expanded() ? 'Down' : 'Right') + '.png'"}), style: "position:relative;top:1px", width: 11, height: 11}
            %span{ko(text: :name)}
          <!-- ko if: !$root.admin() -->
          %td.center{ko(text: :allReadUI)}
          %td.center{ko(text: :allWriteUI)}
          <!-- /ko -->
          <!-- ko if: $root.admin() -->
          %td.center
            %span{ko(attr: {:class => :allRead}, click: :toggleAllRead)}
          %td.center
            %span{ko(attr: {:class => :allWrite}, click: :toggleAllWrite)}
          <!-- /ko -->
        <!-- ko if: expanded -->
        <!-- ko foreach: membershipLayerLinks -->
        %tr{:style => 'height:32px'}
          %td
            %span{ko(text: 'membership.userDisplayName()'), style: 'margin-left:20px'}
          <!-- ko if: !$root.admin() || membership.isCurrentUser() -->
          %td.center{ko(text: :canReadUI)}
          %td.center{ko(text: :canWriteUI)}
          <!-- /ko -->
          <!-- ko if: $root.admin() && !membership.isCurrentUser() -->
          %td.center
            %input{ko(checked: :canRead), type: :checkbox}
          %td.center
            %input{ko(checked: :canWrite), type: :checkbox}
          <!-- /ko -->
          %td
        <!-- /ko -->
        <!-- /ko -->
        <!-- /ko -->
    <!-- /ko -->