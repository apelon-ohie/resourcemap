= form_for collection do |f|
  :javascript
    $(document).ready(function(){
      var select_icon = $('#select_icon');
      if(select_icon.val() == "")
        select_icon.val('llocation');
      $("#focus_icon").val(select_icon.val());
      $('.' + select_icon.val()).css('backgroundPosition', '0 -120px');
      
      $("button").click(function(){
        if (this != $('.white')[0]){
          $('.' + $('#focus_icon').val()).css('backgroundPosition', '0 0');
          this.style.backgroundPosition="0 -120px"; 
          $("#focus_icon").val(this.classList["0"]);
        }else{
          $('#select_icon').val($("#focus_icon").val());
        }
      });
    });
  
  .field.w60
    = f.label :name
    = f.text_field :name
    - if f.object.errors[:name].present?
      %label.error= "Name #{f.object.errors[:name].join(', ')}"
  .field.w60
    = f.label :description
    = f.text_area :description, rows: 3
  
  .field.w60
    %label
      User an icon from our library
    %br/
    = f.hidden_field :icon, id: 'select_icon'
    %input#focus_icon{:type =>"hidden"}
      
    %button.llocation{:type => "button"}
    %button.lalertandreport{:type => "button"}
    %button.lbookmark{:type => "button"}
    %button.lcallback{:type => "button"}
    %button.ldate{:type => "button"}
    %button.ldirections{:type => "button"}
    %button.lforwardcall{:type => "button"}
    %button.lgroupchat{:type => "button"}
    %button.lmessage{:type => "button"}
    %button.lmicrophone{:type => "button"}
    %button.lmultipleoptions{:type => "button"}
    %button.lnumber{:type => "button"}
    %button.lnumeral{:type => "button"}
    %button.lparagraph{:type => "button"}
  = f.label :plugins
  %br
  = hidden_field_tag 'collection[selected_plugins][]', nil
  - Plugin.all.each do |plugin|
    = check_box_tag 'collection[selected_plugins][]', plugin.name, collection.plugins.has_key?(plugin.name), id: "plugin_#{plugin.object_id}"
    = label_tag "plugin_#{plugin.object_id}", plugin.name.humanize
    %br
  %br
  = f.button 'Save', :class => 'white'
