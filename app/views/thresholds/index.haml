- content_for :head do
  = javascript_include_tag 'view_models/thresholds_view_model'
  = javascript_include_tag 'maps/thresholds_map'

  :javascript
    function createColorPicker(threshold){
      $('.stat').ColorPicker({
        color: '#0000ff',
          //animation show 
          onShow: function (colpkr) {
            $(colpkr).fadeIn(500);
              return false;
          },
          //animation hide
          onHide: function (colpkr) {
            $(colpkr).fadeOut(500);
              return false;
          },
          onChange: function (hsb, hex, rgb) {
            threshold.color('#' + hex);
          }
         });
    };
    
    function buildColorPicker(th){
      createColorPicker(th); 
    };

    $(function() {
      rm.set({ collection_id: #{collection.id} });
      rm.bootstrap(); 
    });
       
= render 'collections/tabs'

.tabsline
  %h2 Thresholds
  <!-- ko foreach :thresholds -->
  .box.grey.w60{ ko(visible: '$data != $root.currentThreshold()') }
    .ord-buttons
      %input{ ko(value: :priority) }
      %button.up{ ko(click: '$root.moveThresholdUp'), title: 'Move up' }
      %button.down{ ko(click: '$root.moveThresholdDown'), title: 'Move down' }
    .toptitle 
      %span
        When
        %span{ ko(text: :field) }
        is
        %span{ ko(text: :comparisonText) }
        %span{ ko(text: :value) }
        , set color
        %span.stat{"data-bind" => "style: {backgroundColor: color}" }
    .rightbuttons 
      %button.fdelete{ ko(click: '$root.deleteThreshold') }
    .middlebuttons
      %button.farrow{ ko(click: '$root.editThreshold') } Edit
    
  -# Form editor
  .box.w60{ ko(visible: '$data == $root.currentThreshold()') }
    .rightbuttons
      %button.fdelete
    %label Conditions
    .middlebuttons
      when
      = select_tag :fields_option, nil, 'data-bind' => kov(options: '$root.fields', value: :field)
      = select_tag :comparison_option, options_for_select([['is less than', 'lt'], ['is greater than', 'gt']]), "data-bind" => kov(value: :comparisonValue)
      = select_tag :value_or_percent_option, options_for_select([['a value of', 'value'], ['a percent of', 'percent']]), "data-bind" => kov(value: :valueOrPercent)
      %span.ux-nstep.w06 
        %input{ko(value: 'condition().value'), style: ":size => '2', :type => 'text'"}
        %button.kdown{:type => "button"}
        %button.kup{:type => "button"}
      %span.stat{ko(style: {backgroundColor: :color}, click: 'buildColorPicker')}
      %button.premove    
    .middlebuttons
      %select
        %option Or
      %select  
        %option Ocupation
      %select
        %option is more than
      %select
        %option a percent of
      %span.ux-nstep.w06 
        %input{:size => "2", :type => "text", :value => "15"}
        %button.kdown{:type => "button"}
        %button.kup{:type => "button"}
      %span.stat
        %div{:style => "background-color: #0000ff"}

      %button.fremove 

    %button.fadd
      Add new condition
    %hr
    .bottom-actions
      %button.white{ ko(click: '$root.saveThreshold') } Save
      %a.tgrey{ ko(click: '$root.cancelThreshold'), href: 'javascript:void(0)' } Cancel

  %br/
  <!-- /ko --> 

  -# New threshold link
  .box.grey.add{ ko(visible: 'state() == "listing"', click: 'showAddThreshold'), style: 'display:none'}
    %span
      Add threshold
    %button.cadd.right
    %br{clear: :all}
